'''
This script is used to analyze the output of model tuning script
'''

import numpy as np
from sklearn.model_selection import ParameterGrid

names = [
        "Random Forest"]
tuned_parameters=[

    {'criterion':['entropy','gini'],'max_depth':[8, 9, 10],'n_estimators':[20,30,40]}
    ]

train_conf = [{0: [np.array([[130582,   2751],
       [  4644,  29706]]), np.array([[157516,   4472],
       [  3825,  40905]]), np.array([[197891,   4041],
       [  5090,  44160]]), np.array([[254276,   4450],
       [  6848,  45772]]), np.array([[290578,   4016],
       [  9537,  48793]])], 1: [np.array([[130315,   3018],
       [  2726,  31624]]), np.array([[157537,   4451],
       [  3803,  40927]]), np.array([[197817,   4115],
       [  5283,  43967]]), np.array([[254532,   4194],
       [  6617,  46003]]), np.array([[290367,   4227],
       [  7920,  50410]])], 2: [np.array([[130306,   3027],
       [  2588,  31762]]), np.array([[158485,   3503],
       [  4467,  40263]]), np.array([[197686,   4246],
       [  5323,  43927]]), np.array([[254055,   4671],
       [  5415,  47205]]), np.array([[289981,   4613],
       [  7640,  50690]])], 3: [np.array([[129992,   3341],
       [  2080,  32270]]), np.array([[157976,   4012],
       [  3622,  41108]]), np.array([[197791,   4141],
       [  4280,  44970]]), np.array([[254569,   4157],
       [  5461,  47159]]), np.array([[290289,   4305],
       [  6903,  51427]])], 4: [np.array([[130469,   2864],
       [  2498,  31852]]), np.array([[158154,   3834],
       [  2917,  41813]]), np.array([[198325,   3607],
       [  4384,  44866]]), np.array([[254680,   4046],
       [  5287,  47333]]), np.array([[290387,   4207],
       [  6014,  52316]])], 5: [np.array([[130144,   3189],
       [  1931,  32419]]), np.array([[157589,   4399],
       [  3257,  41473]]), np.array([[198263,   3669],
       [  4616,  44634]]), np.array([[254098,   4628],
       [  4617,  48003]]), np.array([[290283,   4311],
       [  6793,  51537]])], 6: [np.array([[129998,   3335],
       [  1637,  32713]]), np.array([[158654,   3334],
       [  3402,  41328]]), np.array([[198163,   3769],
       [  3484,  45766]]), np.array([[254634,   4092],
       [  3786,  48834]]), np.array([[289606,   4988],
       [  5711,  52619]])], 7: [np.array([[130207,   3126],
       [  1645,  32705]]), np.array([[158380,   3608],
       [  3253,  41477]]), np.array([[197776,   4156],
       [  2787,  46463]]), np.array([[254768,   3958],
       [  4034,  48586]]), np.array([[290286,   4308],
       [  4939,  53391]])], 8: [np.array([[130575,   2758],
       [  1896,  32454]]), np.array([[158280,   3708],
       [  2752,  41978]]), np.array([[197930,   4002],
       [  3136,  46114]]), np.array([[254782,   3944],
       [  4014,  48606]]), np.array([[290511,   4083],
       [  6254,  52076]])], 9: [np.array([[130673,   2660],
       [  3366,  30984]]), np.array([[158270,   3718],
       [  4693,  40037]]), np.array([[197732,   4200],
       [  6767,  42483]]), np.array([[254318,   4408],
       [  6039,  46581]]), np.array([[289055,   5539],
       [  7302,  51028]])], 10: [np.array([[130341,   2992],
       [  2821,  31529]]), np.array([[158192,   3796],
       [  4489,  40241]]), np.array([[198109,   3823],
       [  5872,  43378]]), np.array([[254478,   4248],
       [  6228,  46392]]), np.array([[290892,   3702],
       [ 11437,  46893]])], 11: [np.array([[130397,   2936],
       [  3052,  31298]]), np.array([[158574,   3414],
       [  4772,  39958]]), np.array([[197823,   4109],
       [  5075,  44175]]), np.array([[255001,   3725],
       [  7527,  45093]]), np.array([[289853,   4741],
       [  7373,  50957]])], 12: [np.array([[130750,   2583],
       [  3125,  31225]]), np.array([[158062,   3926],
       [  3114,  41616]]), np.array([[197823,   4109],
       [  4630,  44620]]), np.array([[254658,   4068],
       [  4931,  47689]]), np.array([[290351,   4243],
       [  7357,  50973]])], 13: [np.array([[130144,   3189],
       [  2251,  32099]]), np.array([[158470,   3518],
       [  3772,  40958]]), np.array([[198269,   3663],
       [  4889,  44361]]), np.array([[254081,   4645],
       [  4614,  48006]]), np.array([[290312,   4282],
       [  6137,  52193]])], 14: [np.array([[130614,   2719],
       [  2684,  31666]]), np.array([[158503,   3485],
       [  3640,  41090]]), np.array([[198233,   3699],
       [  4205,  45045]]), np.array([[254810,   3916],
       [  4679,  47941]]), np.array([[290269,   4325],
       [  6437,  51893]])], 15: [np.array([[130682,   2651],
       [  2086,  32264]]), np.array([[158870,   3118],
       [  3037,  41693]]), np.array([[198595,   3337],
       [  3959,  45291]]), np.array([[254763,   3963],
       [  3761,  48859]]), np.array([[289938,   4656],
       [  4680,  53650]])], 16: [np.array([[130474,   2859],
       [  2099,  32251]]), np.array([[158701,   3287],
       [  2877,  41853]]), np.array([[198198,   3734],
       [  3900,  45350]]), np.array([[255001,   3725],
       [  4841,  47779]]), np.array([[290277,   4317],
       [  4529,  53801]])], 17: [np.array([[131006,   2327],
       [  2060,  32290]]), np.array([[158933,   3055],
       [  2851,  41879]]), np.array([[198007,   3925],
       [  3119,  46131]]), np.array([[254621,   4105],
       [  3418,  49202]]), np.array([[290499,   4095],
       [  5624,  52706]])]}]
val_cross_conf = [{0: [np.array([[1608,  104],
       [  60, 1000]]), np.array([[15256,   125],
       [   79,   291]]), np.array([[19527,    91],
       [   34,   266]]), np.array([[20056,    59],
       [   41,   269]]), np.array([[18238,    85],
       [  120,    70]])], 1: [np.array([[1574,  138],
       [   2, 1058]]), np.array([[15252,   129],
       [   70,   300]]), np.array([[19520,    98],
       [   32,   268]]), np.array([[20095,    20],
       [   50,   260]]), np.array([[18239,    84],
       [  120,    70]])], 2: [np.array([[1582,  130],
       [  13, 1047]]), np.array([[15330,    51],
       [  120,   250]]), np.array([[19540,    78],
       [   40,   260]]), np.array([[20095,    20],
       [   35,   275]]), np.array([[18206,   117],
       [  120,    70]])], 3: [np.array([[1556,  156],
       [   2, 1058]]), np.array([[15272,   109],
       [   61,   309]]), np.array([[19537,    81],
       [   32,   268]]), np.array([[20089,    26],
       [   41,   269]]), np.array([[18193,   130],
       [  120,    70]])], 4: [np.array([[1568,  144],
       [  20, 1040]]), np.array([[15286,    95],
       [   70,   300]]), np.array([[19552,    66],
       [   40,   260]]), np.array([[20085,    30],
       [   59,   251]]), np.array([[18234,    89],
       [  120,    70]])], 5: [np.array([[1552,  160],
       [  12, 1048]]), np.array([[15245,   136],
       [   70,   300]]), np.array([[19543,    75],
       [   32,   268]]), np.array([[20086,    29],
       [   37,   273]]), np.array([[18219,   104],
       [  120,    70]])], 6: [np.array([[1522,  190],
       [   2, 1058]]), np.array([[15339,    42],
       [   92,   278]]), np.array([[19543,    75],
       [   30,   270]]), np.array([[20089,    26],
       [   47,   263]]), np.array([[18195,   128],
       [  114,    76]])], 7: [np.array([[1549,  163],
       [   4, 1056]]), np.array([[15299,    82],
       [  104,   266]]), np.array([[19539,    79],
       [   31,   269]]), np.array([[20105,    10],
       [   90,   220]]), np.array([[18224,    99],
       [  120,    70]])], 8: [np.array([[1576,  136],
       [  13, 1047]]), np.array([[15312,    69],
       [   61,   309]]), np.array([[19539,    79],
       [   32,   268]]), np.array([[20095,    20],
       [   50,   260]]), np.array([[18233,    90],
       [  123,    67]])], 9: [np.array([[1584,  128],
       [  16, 1044]]), np.array([[15276,   105],
       [   70,   300]]), np.array([[19527,    91],
       [   30,   270]]), np.array([[20068,    47],
       [   23,   287]]), np.array([[18140,   183],
       [  110,    80]])], 10: [np.array([[1560,  152],
       [  13, 1047]]), np.array([[15280,   101],
       [   74,   296]]), np.array([[19553,    65],
       [   40,   260]]), np.array([[20079,    36],
       [   44,   266]]), np.array([[18216,   107],
       [  116,    74]])], 11: [np.array([[1529,  183],
       [   3, 1057]]), np.array([[15291,    90],
       [   84,   286]]), np.array([[19526,    92],
       [   32,   268]]), np.array([[20095,    20],
       [   59,   251]]), np.array([[18200,   123],
       [  120,    70]])], 12: [np.array([[1544,  168],
       [  10, 1050]]), np.array([[15253,   128],
       [   50,   320]]), np.array([[19539,    79],
       [   30,   270]]), np.array([[20093,    22],
       [   42,   268]]), np.array([[18211,   112],
       [  122,    68]])], 13: [np.array([[1530,  182],
       [   3, 1057]]), np.array([[15302,    79],
       [   80,   290]]), np.array([[19528,    90],
       [   32,   268]]), np.array([[20068,    47],
       [   46,   264]]), np.array([[18211,   112],
       [  120,    70]])], 14: [np.array([[1541,  171],
       [  20, 1040]]), np.array([[15288,    93],
       [   74,   296]]), np.array([[19544,    74],
       [   38,   262]]), np.array([[20096,    19],
       [   60,   250]]), np.array([[18221,   102],
       [  120,    70]])], 15: [np.array([[1584,  128],
       [  20, 1040]]), np.array([[15303,    78],
       [   71,   299]]), np.array([[19554,    64],
       [   31,   269]]), np.array([[20090,    25],
       [   56,   254]]), np.array([[18213,   110],
       [  120,    70]])], 16: [np.array([[1584,  128],
       [   5, 1055]]), np.array([[15303,    78],
       [  102,   268]]), np.array([[19537,    81],
       [   32,   268]]), np.array([[20096,    19],
       [   65,   245]]), np.array([[18221,   102],
       [  112,    78]])], 17: [np.array([[1602,  110],
       [  17, 1043]]), np.array([[15320,    61],
       [  100,   270]]), np.array([[19537,    81],
       [   30,   270]]), np.array([[20086,    29],
       [   43,   267]]), np.array([[18216,   107],
       [  120,    70]])]}]
val_non_cross_conf = [{0: [np.array([[26005,   938],
       [ 1299,  8021]]), np.array([[24242,   321],
       [  631,  3519]]), np.array([[36894,   282],
       [  551,  2519]]), np.array([[15400,   353],
       [ 1403,  3997]]), np.array([[42840,   509],
       [ 1082,  5848]])], 1: [np.array([[25901,  1042],
       [  929,  8391]]), np.array([[24260,   303],
       [  553,  3597]]), np.array([[36876,   300],
       [  575,  2495]]), np.array([[15408,   345],
       [ 1481,  3919]]), np.array([[42791,   558],
       [  931,  5999]])], 2: [np.array([[25908,  1035],
       [  769,  8551]]), np.array([[24300,   263],
       [  652,  3498]]), np.array([[36888,   288],
       [  653,  2417]]), np.array([[15340,   413],
       [ 1157,  4243]]), np.array([[42748,   601],
       [  955,  5975]])], 3: [np.array([[25789,  1154],
       [  770,  8550]]), np.array([[24281,   282],
       [  603,  3547]]), np.array([[36897,   279],
       [  463,  2607]]), np.array([[15373,   380],
       [ 1353,  4047]]), np.array([[42797,   552],
       [  862,  6068]])], 4: [np.array([[26022,   921],
       [  900,  8420]]), np.array([[24252,   311],
       [  428,  3722]]), np.array([[36966,   210],
       [  516,  2554]]), np.array([[15412,   341],
       [ 1277,  4123]]), np.array([[42799,   550],
       [  770,  6160]])], 5: [np.array([[25866,  1077],
       [  649,  8671]]), np.array([[24254,   309],
       [  499,  3651]]), np.array([[36958,   218],
       [  534,  2536]]), np.array([[15372,   381],
       [ 1118,  4282]]), np.array([[42813,   536],
       [  876,  6054]])], 6: [np.array([[25887,  1056],
       [  636,  8684]]), np.array([[24245,   318],
       [  391,  3759]]), np.array([[36932,   244],
       [  448,  2622]]), np.array([[15431,   322],
       [ 1172,  4228]]), np.array([[42716,   633],
       [  771,  6159]])], 7: [np.array([[25856,  1087],
       [  742,  8578]]), np.array([[24288,   275],
       [  474,  3676]]), np.array([[36866,   310],
       [  385,  2685]]), np.array([[15435,   318],
       [ 1204,  4196]]), np.array([[42812,   537],
       [  787,  6143]])], 8: [np.array([[25991,   952],
       [  812,  8508]]), np.array([[24280,   283],
       [  388,  3762]]), np.array([[36907,   269],
       [  400,  2670]]), np.array([[15423,   330],
       [ 1201,  4199]]), np.array([[42817,   532],
       [  881,  6049]])], 9: [np.array([[25994,   949],
       [ 1003,  8317]]), np.array([[24291,   272],
       [  607,  3543]]), np.array([[36859,   317],
       [  894,  2176]]), np.array([[15385,   368],
       [ 1230,  4170]]), np.array([[42693,   656],
       [  935,  5995]])], 10: [np.array([[25925,  1018],
       [  858,  8462]]), np.array([[24312,   251],
       [  686,  3464]]), np.array([[36982,   194],
       [  732,  2338]]), np.array([[15397,   356],
       [ 1280,  4120]]), np.array([[42941,   408],
       [ 1359,  5571]])], 11: [np.array([[26029,   914],
       [  892,  8428]]), np.array([[24332,   231],
       [  668,  3482]]), np.array([[36904,   272],
       [  522,  2548]]), np.array([[15460,   293],
       [ 1494,  3906]]), np.array([[42749,   600],
       [  897,  6033]])], 12: [np.array([[26049,   894],
       [ 1020,  8300]]), np.array([[24307,   256],
       [  420,  3730]]), np.array([[36899,   277],
       [  561,  2509]]), np.array([[15429,   324],
       [ 1235,  4165]]), np.array([[42861,   488],
       [  944,  5986]])], 13: [np.array([[25895,  1048],
       [  770,  8550]]), np.array([[24307,   256],
       [  547,  3603]]), np.array([[36960,   216],
       [  513,  2557]]), np.array([[15352,   401],
       [ 1012,  4388]]), np.array([[42818,   531],
       [  804,  6126]])], 14: [np.array([[26053,   890],
       [  996,  8324]]), np.array([[24319,   244],
       [  510,  3640]]), np.array([[36952,   224],
       [  461,  2609]]), np.array([[15424,   329],
       [ 1163,  4237]]), np.array([[42809,   540],
       [  906,  6024]])], 15: [np.array([[25985,   958],
       [  855,  8465]]), np.array([[24323,   240],
       [  447,  3703]]), np.array([[36994,   182],
       [  634,  2436]]), np.array([[15431,   322],
       [ 1083,  4317]]), np.array([[42728,   621],
       [  741,  6189]])], 16: [np.array([[25949,   994],
       [  737,  8583]]), np.array([[24300,   263],
       [  412,  3738]]), np.array([[36893,   283],
       [  544,  2526]]), np.array([[15428,   325],
       [ 1328,  4072]]), np.array([[42791,   558],
       [  728,  6202]])], 17: [np.array([[26073,   870],
       [  895,  8425]]), np.array([[24311,   252],
       [  414,  3736]]), np.array([[36887,   289],
       [  405,  2665]]), np.array([[15410,   343],
       [ 1104,  4296]]), np.array([[42852,   497],
       [  803,  6127]])]}]




def stats(conf):
    train_active = [conf[i][0][0]/(conf[i][0][0] + conf[i][0][1]+0.0) for i in range(4)]
    train_inactive = [conf[i][1][1]/(conf[i][1][0] + conf[i][1][1]+0.0) for i in range(4)]
    precision = [0 if conf[i][1][1]==0 else conf[i][1][1]/(conf[i][1][1]+conf[i][0][1]+0.0) for i in range(5)]
    f1 = [0 if precision[i] == 0 else 2*precision[i]*train_inactive[i]/(precision[i]+train_inactive[i]) for i in range(4)]
    # print train_active
    # print train_inactive
    # print precision
    # print f1
    mean_active = np.mean(train_active)
    std_active = np.std(train_active)
    mean_inactive = np.mean(train_inactive)
    std_inactive = np.std(train_inactive)
    mean_precision = np.mean(precision)
    std_precision = np.std(precision)
    mean_f1 = np.mean(f1)
    std_f1 = np.std(f1)
    return mean_active, std_active, mean_inactive, std_inactive, mean_precision, std_precision, mean_f1, std_f1


for index, clf in enumerate(names):
    print clf
    for key in train_conf[index]:
        print ("{"),
        for param, v in ParameterGrid(tuned_parameters[index])[key].items():
            print ("%s:%s;"%(param, v)),
        print ("},"),
        #print (ParameterGrid(tuned_parameters[index])[key]),
        ma, sa, mia, sia, mp, sp, mf, sf = stats(train_conf[index][key])
        print ("%s, %s, %s, %s, %s, %s, %s, %s, " % (ma, sa, mia, sia, mp, sp, mf, sf)),
        ma, sa, mia, sia, mp, sp, mf, sf = stats(val_cross_conf[index][key])
        print ("%s, %s, %s, %s, %s, %s, %s, %s, " % (ma, sa, mia, sia, mp, sp, mf, sf)),
        ma, sa, mia, sia, mp, sp, mf, sf = stats(val_non_cross_conf[index][key])
        print ("%s, %s, %s, %s, %s, %s, %s, %s, " % (ma, sa, mia, sia, mp, sp, mf, sf)),
        val_conf = [val_cross_conf[index][key][i]+val_non_cross_conf[index][key][i] for i in range(5)]
        ma, sa, mia, sia, mp, sp, mf, sf = stats(val_conf)
        print ("%s, %s, %s, %s, %s, %s, %s, %s" % (ma, sa, mia, sia, mp, sp, mf, sf))
