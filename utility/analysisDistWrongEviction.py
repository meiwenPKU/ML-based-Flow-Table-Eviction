'''
this script is used to analysis the distribution of the confidence and time difference of the wrong deleted flow entry from the txt file generated by lru/ml simulation
'''
import re
# the input is the logging information from simulations
filename = 'ml-univ1-tcp-udp-1kTable.txt'

class removeEntry:
    def __init__(self,delete_time, confidence,interval,protocol):
        self.confidence = confidence
        self.interval = interval
        self.delete_time = delete_time
        self.protocol = protocol

dict_confidence = {}
v_removeEntry = []
with open(filename,'r') as f:
    for line in f:
        if line.find('remove flow entry with') != -1:
            confi = re.findall("[-+]?\d+[\.]?\d*[eE]?[-+]?\d*",line)
            dict_confidence[float(confi[1])] = float(confi[0])
        elif line.find('t_last_pkt') != -1:
            txt = line.split(',')
            t_last_pkt = re.findall("[-+]?\d+[\.]?\d*[eE]?[-+]?\d*",txt[3])
            t_last_pkt = float(t_last_pkt[0])
            t_last_pkt = "%f" % t_last_pkt
            t_last_pkt = float(t_last_pkt)

            protocol = txt[2]
            if t_last_pkt not in dict_confidence:
                continue

            v_removeEntry.append(removeEntry(delete_time, dict_confidence[t_last_pkt],delete_time-t_last_pkt,protocol))
        elif line.find('delete wrong flow') != -1:
            num = re.findall("[-+]?\d+[\.]?\d*[eE]?[-+]?\d*",line)
            delete_time = float(num[-1])
            if delete_time > 600:
                break
numLess = 0
for entry in v_removeEntry:
    if entry.confidence < 0.5:
        numLess += 1
    print "%f,%f,%f,%s"  % (entry.delete_time,entry.interval,entry.confidence,entry.protocol)
print "numLess = %d, totalMiss = %d" % (numLess,len(v_removeEntry))
